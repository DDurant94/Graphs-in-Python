About:
    This program is designed to find the shortest route from one point to another using Dijkstra’s algorithm. It allows me to visualize and 
  understand how programming can efficiently map points and distances between them in a data structure. The program uses weights associated 
  with each node to compare them with each of the node’s neighbors, finding the shortest route to its goal.

Time & Space Complexity:
  O(n log n) heap sort has a time complexity of O(n log n) in the best, average, and worst cases. This is also implemented in Dijkstra’s algorithm.

    Dijkstra’s algorithm is used to find the shortest path from one node to another. It works by examining each node’s neighbors, looking for the 
  smallest value (distance), and comparing that distance with all other neighbors to determine the shortest path. The algorithm stores these 
  values in a tuple and processes them one at a time until the shortest route is found and returned.

    This algorithm is very useful for navigation in maps or providing information within data structures, such as suggesting friends, songs, 
  or even what video to watch next on social media.

Imports:
  -heapq 
  (This is used for the  relationship between the index for a node and the indexes for its children slightly less
  obvious, but is more suitable since Python uses 0-based indexing. heappop() method returns the smallest item, not the largest.)

Questions:
  Solving Shortest Path Problem with Dijkstra's Algorithm
  Objective: The objective of this assignment is to implement Dijkstra's algorithm to find the shortest path through a graph from a given 
  source node to all other nodes.

  Problem Statement: You are given a weighted graph representing a network of interconnected nodes. Your task is to implement Dijkstra's 
  algorithm to find the shortest path from a given source node to all other nodes in the graph. The algorithm should compute the shortest path 
  distances and paths for all nodes reachable from the source node.

  Task 1: 
    Define Graph Representation

    Define a data structure to represent the weighted graph. You can use an adjacency list or any other suitable data structure to represent the 
    graph. You can use the following example

    class Graph:
        def __init__(self):
            self.vertices = {}

        def add_vertex(self, vertex):
            if vertex not in self.vertices:
                self.vertices[vertex] = {}

        def add_edge(self, source, destination, weight):
            if source in self.vertices and destination in self.vertices:
                self.vertices[source][destination] = weight
                self.vertices[destination][source] = weight  # For undirected graph

        def get_neighbors(self, vertex):
            if vertex in self.vertices:
                return self.vertices[vertex]
            else:
                return {}

    # Example usage:
    graph = Graph()
    graph.add_vertex('A')
    graph.add_vertex('B')
    graph.add_vertex('C')
    graph.add_edge('A', 'B', 5)
    graph.add_edge('B', 'C', 3)
    graph.add_edge('A', 'C', 10)

    print(graph.vertices)  # Output: {'A': {'B': 5, 'C': 10}, 'B': {'A': 5, 'C': 3}, 'C': {'B': 3, 'A': 10}}

  Task 2: 
    Implement Dijkstra's Algorithm

    Implement Dijkstra's algorithm to compute the shortest path from a given source node ( A node) to all other nodes in the graph. Ensure 
    that your implementation correctly handles weighted edges and computes the shortest path distances and paths.

  Task 3: 
    Test the Algorithm Implementation

    Test your Dijkstra's algorithm implementation with different graph configurations. Verify that the algorithm correctly computes the shortest 
    paths from the source node to all other nodes in the graph.

  Task 4: 
    Analyze Time and Space Complexity

    Analyze the time and space complexity of your Dijkstra's algorithm implementation. Provide insights into the efficiency of the algorithm and 
    any potential optimization opportunities.

  Expected Outcomes:

  Upon completing this assignment, students should be able to:

  Define a suitable data structure to represent the weighted graph for Dijkstra's algorithm.
  Implement Dijkstra's algorithm to compute the shortest path from a given source node to all other nodes in the graph.
  Test the correctness of the algorithm implementation with different graph configurations.
  Analyze the time and space complexity of Dijkstra's algorithm and identify potential optimization strategies for improved performance.

  NOTE: Ensure that all code in your file is ready to run. This means that if someone opens your file and clicks the run button at the top, all 
  code executes as intended. For example, if there are if statements, print statements, or for loops, they should function correctly and display 
  output in the console as expected. If you have a function, make sure the function is called and runs. If there are classes/objects, make sure 
  they are instantiated and the methods are called.